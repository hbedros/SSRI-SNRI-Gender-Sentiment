),
#in the main is the table
mainPanel(
DTOutput("tableOutput")
)
)
)
# server logic, we have inputs from UI and outputs to UI
server = function(input, output) {
output$tableOutput = renderDT({  #inside these curly brackets is what we'll see in the table
threshold = input$threshold
probabilities = ssri %>%
group_by(Gender) %>%
summarize(
TotalRatings = n(),
NegativeRatings = sum(total_score < threshold, na.rm = TRUE),
Probability = NegativeRatings / TotalRatings
)
datatable(probabilities, options = list(pageLength = 2))
})
}
# run
shinyApp(ui = ui, server = server)
rsconnect::setAccountInfo(name='haigbedros',
token='2EF094AA8D9C7F92047C31503EEF91F9',
secret='<SECRET>')
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='haigbedros',
token='2EF094AA8D9C7F92047C31503EEF91F9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='haigbedros', token='2EF094AA8D9C7F92047C31503EEF91F9', secret='MgZh2BT8qfN4dR9qYeLUUg0p3+uTcfHQpo/gHDhz')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
# Chunk 1: global_options
knitr::opts_chunk$set(eval = TRUE, message = FALSE, warning = FALSE)
# Chunk 2
# Define the URL of the API
cdc_api <- "https://data.cdc.gov/resource/9j2v-jamp.csv"
# Read the CSV data from the URL
suicide_rates <- read.csv(cdc_api)
# Glimpse of our data
head(suicide_rates)
# Chunk 3
library(stringr)
library(dplyr)
library(tidyverse)
# Extract the different characterstic variables from the column stub_label
suicide_rates <- suicide_rates %>%
mutate(
# Extract Sex
Sex = case_when(
str_detect(stub_label, "^Male") ~ "Male",
str_detect(stub_label, "^Female") ~ "Female",
TRUE ~ NA_character_ # Assign NA to entries that do not start with Male or Female
),
# Combine Race and Ethnicity into one column, ignore entries that are just age groups
RaceEthnicity = case_when(
str_detect(stub_label, "White$") ~ "White",
str_detect(stub_label, "Black or African American$") ~ "Black or African American",
str_detect(stub_label, "American Indian or Alaska Native$") ~ "American Indian or Alaska Native",
str_detect(stub_label, "Asian or Pacific Islander$") ~ "Asian or Pacific Islander",
str_detect(stub_label, "Asian$") ~ "Asian",
str_detect(stub_label, "Native Hawaiian or Other Pacific Islander$") ~ "Native Hawaiian or Other Pacific Islander",
str_detect(stub_label, "Not Hispanic or Latino") ~ "Not Hispanic or Latino",
str_detect(stub_label, "Hispanic or Latino") ~ "Hispanic or Latino",
str_detect(stub_label, "years$") ~ NA_character_, # Assign NA to entries that are just age groups
TRUE ~ "Other/Unknown" # Use this to catch all other entries that don't match previous patterns
)
)
# Now we can remove the original `stub_label` column if it's no longer needed
suicide_rates <- suicide_rates %>%
select(-stub_label)
# Replace NA values in the 'Sex' column with "All"
suicide_rates <- suicide_rates %>%
mutate(Sex = replace_na(Sex, "All"))
# Replace NA values in the 'RaceEthnicity' column with "Other/Unknown"
suicide_rates <- suicide_rates %>%
mutate(RaceEthnicity = replace_na(RaceEthnicity, "Other/Unknown"))
# Renaming 'estimate' to 'death_rate_est' for readability and drop specified columns
suicide_rates <- suicide_rates %>%
select(-unit_num, -stub_name_num, -stub_name, -stub_label_num, -year_num, -age_num, -flag) %>%
rename(death_rate_est = estimate) %>%
select(year, everything())
# We'll use the 'year' as a continuous x-axis for a line plot
# Making sure the 'year' column is numeric
suicide_rates$year <- as.numeric(as.character(suicide_rates$year))
# Aggregate data by year and calculate the average death rate
suicide_rates_yearly <- suicide_rates %>%
group_by(year, Sex) %>%
summarise(death_rate_est = mean(death_rate_est, na.rm = TRUE))
# Plot 1: Trends of suicide rates throughout the years where sex = All
plot1 <- ggplot(data = suicide_rates_yearly, aes(x = year, y = death_rate_est, color = Sex)) +
geom_line() +
theme_minimal() +
labs(
title = "Trends of Suicide Rates Throughout the Years (Combined Sexes)",
x = "Year",
y = "Average Death Rate (per 100,000 individuals)",
color = "Sex"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot 2: Trends of suicide rates throughout the years of the RaceEthnicity
plot2 <- suicide_rates %>%
group_by(year, RaceEthnicity) %>%
summarise(death_rate_est = mean(death_rate_est, na.rm = TRUE)) %>%
ggplot(aes(x = year, y = death_rate_est, color = RaceEthnicity)) +
geom_line() +
theme_minimal() +
labs(
title = "Trends of Suicide Rates Throughout the Years by Race/Ethnicity",
x = "Year",
y = "Average Death Rate (per 100,000 individuals)",
color = "Race/Ethnicity"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plot 3: Trends of suicide rates throughout the years of sex = Female or Male and age != All Ages
plot3 <- suicide_rates %>%
filter(Sex != "All", age != "All Ages") %>%
group_by(year, Sex, age) %>%
summarise(death_rate_est = mean(death_rate_est, na.rm = TRUE)) %>%
ggplot(aes(x = year, y = death_rate_est, color = Sex, group = interaction(Sex, age))) +
geom_line() +
facet_wrap(~age, scales = "free_y") +
theme_minimal() +
labs(
title = "Trends of Suicide Rates Throughout the Years by Sex and Age Group",
x = "Year",
y = "Average Death Rate (per 100,000 individuals)",
color = "Sex"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Printing the plots
print(plot1)
print(plot2)
print(plot3)
# Chunk 4
# Transforming our data to include a new column for decade
suicide_rates_transformed <- suicide_rates %>%
mutate(Decade = floor(year / 10) * 10) %>%  # Create a new column for Decade
group_by(Decade, RaceEthnicity) %>%         # Group by Decade and RaceEthnicity
summarize(MeanDeathRate = mean(death_rate_est, na.rm = TRUE))  # Calculate mean death rate
# View the transformed data
suicide_rates_transformed
# Plotting our transformed data
plot4 <- ggplot(suicide_rates_transformed, aes(x = as.factor(Decade), y = MeanDeathRate, fill = RaceEthnicity)) +
geom_bar(stat = "identity", position = position_dodge()) +
theme_minimal() +
labs(
title = "Mean Suicide Death Rates by Race/Ethnicity and Decade",
x = "Decade",
y = "Mean Death Rate (per 100,000 individuals)",
fill = "Race/Ethnicity"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x labels for readability
print(plot4)
# Chunk 5
head(suicide_rates_yearly)
# Chunk 6
head(suicide_rates)
# Chunk 7
head(suicide_rates_transformed)
# Chunk 8
tapply(suicide_rates_yearly$death_rate_est,suicide_rates_yearly$Sex,summary,na.rm=TRUE)
tapply(suicide_rates_yearly$death_rate_est,suicide_rates_yearly$Sex,sd,na.rm=TRUE)
# Chunk 9
ggplot(data = suicide_rates_yearly, mapping = aes(x = Sex,y = death_rate_est))+
geom_boxplot()+
ggtitle("Checking the means and std of Males to Females to All")
# Chunk 10
library(car)
# Levene's test of equal variances.
# Low p-value means the variances are not equal.
leveneTest(suicide_rates_yearly$death_rate_est,suicide_rates_yearly$Sex)
# Chunk 11
library(LearnBayes)
dfA = na.omit(suicide_rates_yearly)
# Code 'Female' as 0 and 'Male' as 1 in the 'Sex' column
# This assumes that dfA$Sex is a factor or character vector
dfA$Sex <- as.numeric(dfA$Sex == 'Male')
# Remove rows where 'Sex' is "All"
dfA <- dfA[dfA$Sex != "All", , drop = FALSE]
# Ensure all columns are numeric for correlation; if not, convert them
dfA_numeric <- data.frame(lapply(dfA, function(x) if(is.numeric(x)) x else as.numeric(as.character(x))))
# Remove any NA values that could cause cor() to fail
dfA_numeric <- na.omit(dfA_numeric)
# Calculate the correlation matrix for numeric data frame
cor_matrix <- cor(dfA_numeric)
# Print the correlation matrix
print(cor_matrix)
# Chunk 12
#tapply(suicide_rates$death_rate_est,suicide_rates$ages,summary,na.rm=TRUE)
tapply(suicide_rates$death_rate_est,suicide_rates$age,summary,na.rm=TRUE)
# Chunk 13
ggplot(data = suicide_rates_yearly, mapping = aes(x = Sex,y = death_rate_est))+
geom_boxplot()+
ggtitle("Checking the means and std of Males to Females to All")
# Chunk 14
ggplot(data = suicide_rates, mapping = aes(x = age,y = death_rate_est))+
geom_boxplot()+
ggtitle("Center and Spread between the Age_ranges")
# Chunk 15
library(car)
# Levene's test of equal variances.
leveneTest(suicide_rates$death_rate_est,suicide_rates$age)
# Low p-value means the variances are not equal.
# Chunk 16
#install.packages("LearnBayes")
library(LearnBayes)
fit = lm(death_rate_est ~ age, data = suicide_rates,x=TRUE, y=TRUE)
posterior_sims = blinreg(fit$y,fit$x,5000)
fit$coefficients
# Chunk 17
oneway.test(death_rate_est ~ age, data = suicide_rates, var.equal = FALSE)
# Chunk 18
tapply(suicide_rates_transformed$MeanDeathRate,suicide_rates_transformed$RaceEthnicity,summary,na.rm=TRUE)
# Chunk 19
library(ggplot2)
ggplot(data = suicide_rates_transformed, mapping = aes(x =RaceEthnicity ,y = MeanDeathRate))+
geom_boxplot()+
ggtitle("Checking the Center and Spread of Ethnic groups")
# Chunk 23: data
library(httr)
# Reading a CSV file from a raw GitHub link - WEBMD Scrapped Data
raw_cymbalta_reviews <- read.csv(url("https://raw.githubusercontent.com/hbedros/SSRI-SNRI-Gender-Sentiment/main/data/cymbalta_reviews.csv"))
raw_effexor_reviews <- read.csv(url("https://raw.githubusercontent.com/hbedros/SSRI-SNRI-Gender-Sentiment/main/data/effexor_reviews.csv"))
raw_lexapro_reviews <- read.csv(url("https://raw.githubusercontent.com/hbedros/SSRI-SNRI-Gender-Sentiment/main/data/lexapro_reviews.csv"))
raw_prozac_reviews <- read.csv(url("https://raw.githubusercontent.com/hbedros/SSRI-SNRI-Gender-Sentiment/main/data/prozac_reviews.csv"))
# Chunk 24
library(tidyr)
library(dplyr)
# Rename the first column of raw_prozac_reviews to 'reviewer_info'
names(raw_prozac_reviews)[1] <- "reviewer_info"
# Define the cleanup function
cleanup_data <- function(raw_cymbalta_reviews) {
# Separate the 'reviewer_info' columns into seperate columns
data_separated <- raw_cymbalta_reviews %>%
separate(reviewer_info, into = paste0("column", 1:5), sep = " \\| ", fill = "right", extra = "merge")
# Define the 'reassign_columns' function to handle reassignment
reassign_columns <- function(df) {
df %>%
mutate(
# Assign the first column as Name
Name = column1,
# Extract the first age range number as the Age using RegEx. If not present, return NA.
Age = case_when(
grepl("^\\d{2}-\\d{2}", column2) ~ sub("^(\\d{2})-\\d{2}", "\\1", column2),
grepl("^\\d{2}-\\d{2}", column3) ~ sub("^(\\d{2})-\\d{2}", "\\1", column3),
grepl("75 or over", column2) ~ "75+",
grepl("75 or over", column3) ~ "75+",
TRUE ~ NA_character_
),
# Identify and assign the Gender. If not present, return NA.
Gender = case_when(
grepl("Male|Female|Nonbinary|Transgender", column3) ~ column3,
grepl("Male|Female|Nonbinary|Transgender", column4) ~ column4,
TRUE ~ NA_character_
),
# Check for medication duration and assign it MedDur_Months If not present, return NA.
MedDur_Months = case_when(
grepl("On medication for", column4) ~ column4,
grepl("On medication for", column5) ~ column5,
TRUE ~ NA_character_
),
# Assign Role based on the content or default to 'Patient'.
Role = ifelse(grepl("Patient|Caregiver", column5), column5,
ifelse(grepl("Patient|Caregiver", column4), column4, "Patient"))
) %>%
select(Name, Age, Gender, MedDur_Months, Role)
}
# Create 'reassign_columns' function to the separated data
data_cleaned <- reassign_columns(data_separated)
# Remove the first column from 'raw_cymbalta_reviews'
data_dropped_column <- select(raw_cymbalta_reviews, -reviewer_info)
# Merge 'data_dropped_column' with 'data11_cleaned'
# If there is no unique ID to merge by, we'll assume that rows align and we can bind by row number.
cymbalta_reviews <- bind_cols(data_cleaned, data_dropped_column)
# Custom function to convert medication duration strings to a range in months
convert_to_month_range <- function(duration) {
# Remove the leading space and "On medication for" part
duration <- gsub(" On medication for ", "", duration)
# Define the conversion pattern
pattern <- c("less than 1 month" = "0-1",
"1 to 6 months" = "1-6",
"6 months to less than 1 year" = "6-12",
"1 to less than 2 years" = "12-24",
"2 to less than 5 years" = "24-60",
"5 to less than 10 years" = "60-120",
"10 years or more" = "120+")
# Match the pattern and return the corresponding range
return(pattern[duration])
}
# Apply the custom function to the 'Medication Duration' column
cymbalta_reviews <- cymbalta_reviews %>%
mutate(MedDur_Months = ifelse(is.na(MedDur_Months), NA, convert_to_month_range(MedDur_Months)))
# Remove spaces from column 'Role'
cymbalta_reviews <- cymbalta_reviews %>%
mutate(Role = trimws(Role, which = "left"))
cymbalta_reviews <- cymbalta_reviews %>%
mutate(Gender = trimws(Gender, which = "left"))
}
# List of our raw dataset names
raw_dataset_names <- c("raw_cymbalta_reviews", "raw_effexor_reviews", "raw_lexapro_reviews", "raw_prozac_reviews")
# Apply the cleanup function to each dataset and assign the results to separate variables
for (dataset_name in raw_dataset_names) {
# Use get() to retrieve the value of the variable by name
dataset <- get(dataset_name)
# Apply the cleanup_data function
cleaned_data <- cleanup_data(dataset)
# Remove 'raw_' from the name to create the new variable name
cleaned_name <- gsub("raw_", "", dataset_name)
# Use assign() to assign the cleaned data to a new variable in the global environment
assign(cleaned_name, cleaned_data, envir = .GlobalEnv)
}
# Function to categorize age into specified ranges
categorize_age <- function(age) {
case_when(
age >= 7 & age <= 12  ~ "7 - 12",
age >= 13 & age <= 18 ~ "13 - 18",
age >= 19 & age <= 24 ~ "19 - 24",
age >= 25 & age <= 34 ~ "25 - 34",
age >= 35 & age <= 44 ~ "35 - 44",
age >= 45 & age <= 54 ~ "45 - 54",
age >= 55 & age <= 64 ~ "55 - 64",
age >= 65 & age <= 74 ~ "65 - 74",
age >= 75 | age == "75+" ~ "75+",
TRUE ~ NA_character_  # For NA or unclassified ages
)
}
# Apply the function to each cleaned dataset
list_datasets <- list(cymbalta_reviews, effexor_reviews, lexapro_reviews, prozac_reviews)
names(list_datasets) <- c("cymbalta_reviews", "effexor_reviews", "lexapro_reviews", "prozac_reviews")
list_datasets <- lapply(list_datasets, function(dataset) {
dataset %>%
mutate(Age = ifelse(!is.na(Age) & Age != "75+", as.numeric(Age), Age),  # Convert to numeric, but keep "75+"
Age = categorize_age(Age))  # Apply the age categorization function
})
# Extracting the datasets back to their respective variables
list2env(list_datasets, envir = .GlobalEnv)
# Chunk 25
library(tidytext)
cymbalta_reviews$Date = as.Date(cymbalta_reviews$Date, format = "%m/%d/%Y")
tidy_cymbalta = cymbalta_reviews %>%
arrange(Date) %>%
mutate(review_id = row_number()) %>%
unnest_tokens(word, Review)
effexor_reviews$Date = as.Date(effexor_reviews$Date, format = "%m/%d/%Y") #Just in case we'd like to sort over time
tidy_effexor = effexor_reviews %>%
arrange(Date) %>%
mutate(review_id = row_number()) %>%
unnest_tokens(word, Review)
lexapro_reviews$Date = as.Date(lexapro_reviews$Date, format = "%m/%d/%Y") # in case we want to sort over time?
tidy_lexapro = lexapro_reviews %>%
arrange(Date) %>%
mutate(review_id = row_number()) %>%
unnest_tokens(word, Review)
prozac_reviews = prozac_reviews %>% rename(Review = review_text, Date = date)
prozac_reviews$Date = as.Date(prozac_reviews$Date, format = "%m/%d/%Y") # in case we want to sort over time?
tidy_prozac = prozac_reviews %>%
arrange(Date) %>%
mutate(review_id = row_number()) %>%
unnest_tokens(word, Review)
head(tidy_cymbalta)
# Chunk 26
cymbalta_reviews$Date = as.Date(cymbalta_reviews$Date, format = "%m/%d/%Y")
tidy_cymbalta = cymbalta_reviews %>%
arrange(Date) %>%
mutate(review_id = row_number()) %>%
unnest_tokens(word, Review)
effexor_reviews$Date = as.Date(effexor_reviews$Date, format = "%m/%d/%Y") #Just in case we'd like to sort over time
tidy_effexor = effexor_reviews %>%
arrange(Date) %>%
mutate(review_id = row_number()) %>%
unnest_tokens(word, Review)
lexapro_reviews$Date = as.Date(lexapro_reviews$Date, format = "%m/%d/%Y") # in case we want to sort over time?
tidy_lexapro = lexapro_reviews %>%
arrange(Date) %>%
mutate(review_id = row_number()) %>%
unnest_tokens(word, Review)
prozac_reviews$Date = as.Date(prozac_reviews$Date, format = "%m/%d/%Y") # in case we want to sort over time?
tidy_prozac = prozac_reviews %>%
arrange(Date) %>%
mutate(review_id = row_number()) %>%
unnest_tokens(word, Review)
head(tidy_cymbalta)
# Chunk 27
if (!require("textdata")) {
install.packages("textdata", repos = "http://cran.us.r-project.org", dependencies = TRUE)
library(afinn)
}
library(textdata)
afinn = get_sentiments("afinn")
#essentially making "depression" and "anxiety" stop words:
tidy_effexor = tidy_effexor %>%
filter(!(word %in% c("depression", "anxiety"))) %>%
inner_join(afinn, by = "word")
effexor_scores = tidy_effexor %>%
group_by(review_id, Gender, Age, MedDur_Months, Role, Date) %>%
summarize(total_score = sum(value, na.rm = TRUE))
# And the same for the other drugs...
tidy_cymbalta = tidy_cymbalta %>%
filter(!(word %in% c("depression", "anxiety"))) %>%
inner_join(afinn, by = "word")
cymbalta_scores = tidy_cymbalta %>%
group_by(review_id, Gender, Age, MedDur_Months, Role, Date) %>%
summarize(total_score = sum(value, na.rm = TRUE))
tidy_lexapro = tidy_lexapro %>%
filter(!(word %in% c("depression", "anxiety"))) %>%
inner_join(afinn, by = "word")
lexapro_scores = tidy_lexapro %>%
group_by(review_id, Gender, Age, MedDur_Months, Role, Date) %>%
summarize(total_score = sum(value, na.rm = TRUE))
tidy_prozac = tidy_prozac %>%
filter(!(word %in% c("depression", "anxiety"))) %>%
inner_join(afinn, by = "word")
prozac_scores = tidy_prozac %>%
group_by(review_id, Gender, Age, MedDur_Months, Role, Date) %>%
summarize(total_score = sum(value, na.rm = TRUE))
head(cymbalta_scores)
head(effexor_scores)
head(lexapro_scores)
head(prozac_scores)
# Chunk 28
library(ggplot2)
cymbalta_scores = cymbalta_scores %>%
filter(Gender %in% c("Male", "Female"))
cymbalta_scores %>% ggplot(aes(x = Gender, y = total_score, fill = Gender)) +
geom_boxplot() +
labs(title = "Distribution of Cymbalta Review Scores by Gender", x = "Gender", y = "Score")
effexor_scores = effexor_scores %>%
filter(Gender %in% c("Male", "Female"))
effexor_scores %>% ggplot(aes(x = Gender, y = total_score, fill = Gender)) +
geom_boxplot() +
labs(title = "Distribution of Effexor Review Scores by Gender", x = "Gender", y = "Score")
# Chunk 29
lexapro_scores = lexapro_scores %>%
filter(Gender %in% c("Male", "Female"))
lexapro_scores %>% ggplot(aes(x = Gender, y = total_score, fill = Gender)) +
geom_boxplot() +
labs(title = "Distribution of Lexapro Review Scores by Gender", x = "Gender", y = "Score")
prozac_scores = prozac_scores %>%
filter(Gender %in% c("Male", "Female"))
prozac_scores %>% ggplot(aes(x = Gender, y = total_score, fill = Gender)) +
geom_boxplot() +
labs(title = "Distribution of Prozac Review Scores by Gender", x = "Gender", y = "Score")
# Chunk 30
snri = rbind(cymbalta_scores, effexor_scores)
ssri = rbind(lexapro_scores, prozac_scores)
head(snri)
head(ssri)
# Chunk 31
snri %>% ggplot(aes(x = total_score)) +
geom_histogram(binwidth = 5) +
labs(title = "Histogram of Scores",
x = "Total Score",
y = "Count")
ssri %>% ggplot(aes(x = total_score)) +
geom_histogram(binwidth = 4) +
labs(title = "Histogram of Scores",
x = "Total Score",
y = "Count")
# Chunk 32
snri_anova = aov(total_score ~ Gender, data = snri)
summary(snri_anova)
ssri_anova = aov(total_score ~ Gender, data = ssri)
summary(ssri_anova)
# Chunk 33
gender_stats = ssri %>%
group_by(Gender) %>%
summarize(
Mean = mean(total_score, na.rm = TRUE),
Median = median(total_score, na.rm = TRUE),
Q1 = quantile(total_score, 0.25, na.rm = TRUE),
Q3 = quantile(total_score, 0.75, na.rm = TRUE),
IQR = IQR(total_score, na.rm = TRUE),
Min = min(total_score, na.rm = TRUE),
Max = max(total_score, na.rm = TRUE)
)
gender_stats
# Chunk 34
library(shiny)
library(DT)
ui = fluidPage(
titlePanel("Dynamic Threshold for SSRI Ratings"), #title (do we like?)
#w will do a side and a main...in the side is the slider
sidebarLayout(
sidebarPanel(
sliderInput("threshold", "Threshold for Negative Rating:",
min = -50, max = 0, value = -30)
),
#in the main is the table
mainPanel(
DTOutput("tableOutput")
)
)
)
# server logic, we have inputs from UI and outputs to UI
server = function(input, output) {
output$tableOutput = renderDT({  #inside these curly brackets is what we'll see in the table
threshold = input$threshold
probabilities = ssri %>%
group_by(Gender) %>%
summarize(
TotalRatings = n(),
NegativeRatings = sum(total_score < threshold, na.rm = TRUE),
Probability = NegativeRatings / TotalRatings
)
datatable(probabilities, options = list(pageLength = 2))
})
}
# run
shinyApp(ui = ui, server = server)
